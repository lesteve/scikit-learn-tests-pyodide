name: Test Emscripten/Pyodide build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # daily scheduled build at 4am
  schedule:
      - cron: "0 4 * * *"

jobs:
  build-wasm-emscripten:
    runs-on: ubuntu-latest
    env:
      PYODIDE_JS_VERSION: '0.22.0'
      NODE_VERSION: 18
    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: pyodide-env
          python-version: 3.10.2
          channels: conda-forge

      - name: Check Python versions
        shell: bash -l {0}
        run: |
          python --version
          which python

      - name: clone pyodide repo
        shell: bash -l {0}
        run: |
          git clone https://github.com/pyodide/pyodide --depth 1
          cd pyodide
          git log -1
          pip install -e ./pyodide-build

      - name: Cache ccache output
        uses: actions/cache@v2
        with:
          path: |
            /tmp/ccache
          key: ${{ hashFiles('pyodide/Makefile.envs') }}-v20211025-

      - name: Download latest Pyodide debug build
        uses: actions/github-script@v6
        with:
          script: |
            var fs = require("fs");
            const owner = "lesteve";
            const repo = "scipy-tests-pyodide";

            const artifacts_response = await github.rest.actions.listArtifactsForRepo({owner: owner, repo: repo});
            console.log(`Found ${artifacts_response.data.total_count} artifacts`);
            artifacts = artifacts_response.data.artifacts;

            const most_recent_artifact = artifacts[0];

            const response = await github.rest.actions.downloadArtifact({
                owner: owner, repo: repo, artifact_id: most_recent_artifact.id, archive_format: "zip"});
            console.log(`Downloaded ${response.data.byteLength / 1000000} MB`);

            await fs.appendFile("pyodide-build.zip", Buffer.from(response.data), function (err) {
                if (err) throw err;
            });

      - name: Unzip Pyodide debug build artifact
        run: |
          unzip pyodide-build.zip -d pyodide

      - name: Download scikit-learn
        run: |
          git clone https://github.com/scikit-learn/scikit-learn --depth 1
          echo scikit-learn commit information
          git -C scikit-learn log -1

      # TODO: cache the wheel and avoid rebuilding
      - name: Build dev scikit-learn wheel
        shell: bash -l {0}
        run: |
          cd scikit-learn/
          CFLAGS=-g2 LDFLAGS=-g2 pyodide build

          # Copy scikit-learn dev wheel to pyodide dist
          cp -r dist/* ../pyodide/dist

      # Note: Pyodide venv with scipy doesn't work for now due to https://github.com/pyodide/pyodide/issues/3186
      # - name: install Pyodide
      #   run: |
      #     pyodide venv .venv-pyodide
      # - name: Test
      #   run: |
      #     source .venv-pyodide/bin/activate
      #     pip install scikit-learn/dist/*.whl pytest
      #     pytest --pyargs sklearn.preprocessing

      - name: set up node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: install Pyodide
        run: |
          npm install "pyodide@$PYODIDE_JS_VERSION"

      - name: install debug build
        run: |
          ls -ltrh dist
          cp pyodide/dist/* node_modules/pyodide

      - name: Test
        run: |
          python run-tests-by-module.py
